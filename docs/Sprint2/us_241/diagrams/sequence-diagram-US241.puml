@startuml
title Sequence Diagram

actor "Drone Tech" as Actor
participant "AddDroneAction" as Action <<presentation>>
participant "AddDroneUI" as UI <<presentation>>
participant "AddDroneController" as Controller <<application>>
participant "AuthorizationService" as AuthorizationService <<auth>>
participant "DroneManagementService" as DroneManagementService <<application>>
participant "DroneModelManagementService" as DroneModelManagementService <<application>>
participant "Drone" as Drone <<domain>>
participant "DroneRepository" as DroneRepository <<repository>>
participant "DroneModelRepository" as DroneModelRepository <<repository>>

database "Database" as Database

activate Actor

Actor -> Action: Add drone to the inventory

activate Action

Action -> UI** : create
Action -> UI: show()

deactivate Action

    activate UI

UI -> Controller** : create
UI --> Actor: Request Drone Information (Serial Number)
    deactivate UI

 Actor -> UI: Provide Drone Information
  activate UI

UI -> Controller: listDroneModels()
    activate Controller

        Controller -> DroneModelManagementService: listActiveDroneModels()
            activate DroneModelManagementService

                DroneModelManagementService -> DroneModelRepository: findByActive(true)
                    activate DroneModelRepository

                        DroneModelRepository -> Database:  findByActive(true)
                            activate Database

                                Database --> DroneModelRepository: List of Active Drone Models
                            deactivate Database
                        DroneModelRepository --> DroneModelManagementService: List of Active Drone Models
                    deactivate DroneModelRepository


                DroneModelManagementService --> Controller: List of Active Drone Models
            deactivate DroneModelManagementService

        Controller --> UI: List of Active Drone Models
    deactivate Controller

UI --> Actor: Show List of Active Drone Models
deactivate UI

Actor -> UI: Choose Drone Model


    activate UI

        UI -> Controller : addDrone(serialNumber, droneModel)
            activate Controller

                Controller -> AuthorizationService : ensureAuthenticatedUserHasAnyOf(Roles.DRONE_TECH)

                Controller -> DroneManagementService : registerNewDrone(serialNumber, droneModel, createdBy);
                activate DroneManagementService

                    DroneManagementService -> DroneManagementService: registerNewDrone( serialNumber, droneModel, acquisitionDate, user)
                    Activate DroneManagementService

                    DroneManagementService -> Drone** : new Drone(serialNumber, droneModel, acquisitionDate, user);
                                activate Drone

                                   Drone --> DroneManagementService : newDrone
                                deactivate Drone

                    DroneManagementService -> DroneRepository : save(newDrone)

                    activate DroneRepository

                             DroneRepository -> Database : save()
                             activate Database

                                Database --> DroneRepository
                             deactivate Database

                             DroneRepository --> DroneManagementService
                    deactivate DroneRepository
                    DroneManagementService --> DroneManagementService
                    deactivate DroneManagementService

                    DroneManagementService --> Controller
                deactivate DroneManagementService

                Controller --> UI
            deactivate Controller
        UI --> Actor : Confirms Drone is added to the inventory
        deactivate UI
deactivate Actor

@enduml
